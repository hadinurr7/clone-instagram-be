generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  email            String           @unique
  username         String           @unique
  password         String
  fullname         String
  profilePicture   String?
  bio              String?
  followers        Follow[]         @relation("UserFollowers")
  following        Follow[]         @relation("UserFollowing")
  sentMessages     Message[]        @relation("UserSentMessages")
  receivedMessages Message[]        @relation("UserReceivedMessages")
  posts            Post[]           @relation("UserPosts")
  comments         Comment[]        @relation("UserComments")
  stories          Story[]          @relation("UserStories")
  likes            Like[]           @relation("UserLikes")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("users") 
}

model Follow {
  id            Int     @id @default(autoincrement())
  followerId    Int
  followingId   Int
  userFollower  User    @relation("UserFollowers", fields: [followerId], references: [id])
  userFollowing User    @relation("UserFollowing", fields: [followingId], references: [id])
  createdAt     DateTime @default(now())

  @@map("follows") 
}

model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  content     String
  media       String[] @default([])
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sender      User     @relation("UserSentMessages", fields: [senderId], references: [id])
  receiver    User     @relation("UserReceivedMessages", fields: [receiverId], references: [id])

  @@map("messages")
}

model Post {
  id        Int              @id @default(autoincrement())
  userId    Int
  title     String
  content   String
  media     String[]         @default([])
  status    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?
  user      User             @relation("UserPosts", fields: [userId], references: [id])
  comments  Comment[]        @relation("PostComments")
  likes     Like[]           @relation("PostLikes")
  replies   ReplyComment[]   @relation("PostReplies")

  @@map("posts")
}

model Comment {
  id        Int              @id @default(autoincrement())
  userId    Int
  postId    Int
  content   String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?
  user      User             @relation("UserComments", fields: [userId], references: [id])
  post      Post             @relation("PostComments", fields: [postId], references: [id])
  replies   ReplyComment[]   @relation("CommentReplies")

  @@map("comments")
}

model ReplyComment {
  id         Int        @id @default(autoincrement())
  commentId  Int
  postId     Int
  content    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime?
  comment    Comment    @relation("CommentReplies", fields: [commentId], references: [id])
  post       Post       @relation("PostReplies", fields: [postId], references: [id])

  @@map("reply_comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  post      Post     @relation("PostLikes", fields: [postId], references: [id])
  user      User     @relation("UserLikes", fields: [userId], references: [id])

  @@map("likes")
}

model Story {
  id        Int      @id @default(autoincrement())
  userId    Int
  media     String
  createdAt DateTime @default(now())
  user      User     @relation("UserStories", fields: [userId], references: [id])

  @@map("stories")
}
