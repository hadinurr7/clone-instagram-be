// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  email            String     @unique
  username         String     @unique
  password         String
  fullname         String
  profilePicture   String?
  bio              String?
  followers        Follow[]   @relation("UserFollowers")
  following        Follow[]   @relation("UserFollowing")
  sentMessages     Message[]  @relation("UserSentMessages")
  receivedMessages Message[]  @relation("UserReceivedMessages")
  posts            Post[]     @relation("UserPosts")
  comments         Comment[]  @relation("UserComments")
  createdAt        DateTime   @default(now())
}

model Follow {
  id            Int    @id @default(autoincrement())
  followerId    Int
  followingId   Int
  userFollower  User   @relation("UserFollowers", fields: [followerId], references: [id])
  userFollowing User   @relation("UserFollowing", fields: [followingId], references: [id])
  createdAt     DateTime @default(now())
}

model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  content     String
  sender      User     @relation("UserSentMessages", fields: [senderId], references: [id])
  receiver    User     @relation("UserReceivedMessages", fields: [receiverId], references: [id])
  createdAt   DateTime @default(now())
}

model Post {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserPosts", fields: [userId], references: [id])
  comments  Comment[] @relation("PostComments")
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserComments", fields: [userId], references: [id])
  post      Post     @relation("PostComments", fields: [postId], references: [id])
}
